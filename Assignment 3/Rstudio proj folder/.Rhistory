library(readr)
dataA <- read_csv("D:/Dropbox/UEUXopdr3/dataApruned.csv")
dataB <- read_csv("D:/Dropbox/UEUXopdr3/dataBpruned.csv")
dataA$time <- dataA$endtime - dataA$starttime
dataB$time <- dataB$endtime - dataB$starttime
dataBnew <- dataB
dataBnew$time1 <- NULL
dataBnew$time2 <- NULL
data <- rbind(dataA, dataBnew)
rm(dataBnew)
ttest <- t.test(dataA$time, dataB$time)
ttest
mean(dataA$time) - mean(dataB$time)
library(dplyr)
md <- data %>%
group_by(version) %>%
summarize(N = length(time),
Mean = mean(time),
SD = sd(time),
SE = SD/sqrt(N))
md
knitr::kable(md, digits = 2)
library(ggplot2)
fillColors <- function(...){
scale_fill_manual(values = alpha(c("blue","red"),0.5),...)
}
scale_fill_discrete <- fillColors
p <- ggplot(data = data, aes(y = time,
x = version,
fill = version))
p + stat_summary(fun.y = "mean", geom = "bar")
# Error bars
#might require library(Hmisc)
p + stat_summary(fun.y = "mean", geom = "bar") + stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.1)
p + labs(x = Version)
p + labs(x = "Version")
p <- ggplot(data = data, aes(y = time,
x = version,
fill = version))
p + stat_summary(fun.y = "mean", geom = "bar")
# Error bars
#might require library(Hmisc)
p + stat_summary(fun.y = "mean", geom = "bar") + stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.1)
# Box plot
p + geom_boxplot() + labs(x = "Version")
p <- ggplot(data = data, aes(y = time,
x = version,
fill = version))
p + stat_summary(fun.y = "mean", geom = "bar")
# Error bars
#might require library(Hmisc)
p + stat_summary(fun.y = "mean", geom = "bar") + stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.1) +  labs(x = "Version", y = "Time in seconds")
p + geom_boxplot() + labs(x = "Version", y = "Time in seconds")
ggplot(data, aes(x = time, fill = version)) + geom_density(color = NA)
ggplot(data, aes(x = time, fill = version)) + geom_density(color = NA) + labs (x = "Time in seconds", y = "Density")
plot(dataA$age, dataA$time, main="Time vs. Age", pch=19 )
abline(lm(dataA$time~dataA$age), col="red")
lm(dataA$time~dataA$age)
plot(dataA$age, dataA$time, main="Time vs. Age", pch=19 )
abline(lm(dataA$time~dataA$age), col="red")
lm(dataA$time~dataA$age)
summary(lm(dataA$time~dataA$age))
plot(dataA$age, dataA$time, main="Time vs. Age", pch=19, xlab="Age", ylab="Time in seconds")
abline(lm(dataA$time~dataA$age), col="red")
lm(dataA$time~dataA$age)
summary(lm(dataA$time~dataA$age))
plot(dataA$age, dataA$time, pch=19, xlab="Age", ylab="Time in seconds")
abline(lm(dataA$time~dataA$age), col="red")
lm(dataA$time~dataA$age)
summary(lm(dataA$time~dataA$age))
plot(dataB$age, dataB$time, pch=19, xlab="Age", ylab="Time in seconds")
abline(lm(dataB$time~dataB$age), col="red")
lm(dataB$time~dataB$age)
summary(lm(dataB$time~dataB$age))
plot(dataA$age, dataA$time, pch=19, xlab="Age", ylab="Time in seconds", cex.lab=1.5)
abline(lm(dataA$time~dataA$age), col="red")
lm(dataA$time~dataA$age)
summary(lm(dataA$time~dataA$age))
plot(dataA$age, dataA$time, pch=19, xlab="Age", ylab="Time in seconds", cex.lab=1.5)
abline(lm(dataA$time~dataA$age), col="red")
lm(dataA$time~dataA$age)
summary(lm(dataA$time~dataA$age))
plot(dataB$age, dataB$time, pch=19, xlab="Age", ylab="Time in seconds", cex.lab=1.5)
abline(lm(dataB$time~dataB$age), col="red")
lm(dataB$time~dataB$age)
summary(lm(dataB$time~dataB$age))
plot(data$age, data$time, pch=19, xlab="Age", ylab="Time in seconds", cex.lab=1.5)
abline(lm(data$time~data$age), col="red")
lm(data$time~data$age)
summary(lm(data$time~data$age))
library(Hmisc)
rcorr(cbind(dataA$time, dataA$age), type="pearson") # time - age
rcorr(cbind(dataB$time, dataB$age), type="pearson") # time - age
rcorr(cbind(dataB$time, dataB$usedTabs), type="pearson") # time - age
rcorr(cbind(dataB$time, dataB$usedTabs), type="pearson") # time - age
library(ROCR)
p <- predict(model, newdata=subset(dataB, type="response"))
pr <- prediction(p, dataB$usedTabs)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
windows(title="ROC curve")
plot(prf, cex.lab=1.5)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
plot(dataA$time, dataA$usedTabs, xlab="Time (in seconds)", ylab="Probability of using Tabs", xlim=c(0,250))
model = glm(usedTabs ~ time, data = dataA, family = binomial, na.action = na.omit)
summary(model)
curve(predict(model,data.frame(time=x),type="resp"),add=TRUE, col="red")
points(dataA$time,fitted(model),pch=20, col='black')
> library(rcompanion)
> nagelkerke(model)
> library(rcompanion)nagelkerke(model)
library(rcompanion)
nagelkerke(model)
# Version B
plot(dataB$time, dataB$usedTabs, xlab="Time (in seconds)", ylab="Probability of using Tabs", xlim=c(0,250))
model = glm(usedTabs ~ time, data = dataB, family = binomial, na.action = na.omit)
summary(model)
# Pseudo R-squared
library(rcompanion)
nagelkerke(model)
# Draw the curve and points on the plot
curve(predict(model,data.frame(time=x),type="resp"),add=TRUE, col="red")
points(dataB$time,fitted(model),pch=20, col='black')
# Perform performance test on the usedTabs section of dataA
library(ROCR)
p <- predict(model, newdata=subset(dataA, type="response"))
pr <- prediction(p, dataA$usedTabs)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
windows(title="ROC curve")
plot(prf, cex.lab=1.5)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc # result: 0.7083333
# Version A
plot(dataA$time, dataA$usedTabs, xlab="Time (in seconds)", ylab="Probability of using Tabs", xlim=c(0,250))
model = glm(usedTabs ~ time, data = dataA, family = binomial, na.action = na.omit)
summary(model)
# Pseudo R-squared
library(rcompanion)
nagelkerke(model)
# Draw the curve and points on the plot
curve(predict(model,data.frame(time=x),type="resp"),add=TRUE, col="red")
points(dataA$time,fitted(model),pch=20, col='black')
# Perform performance test on the usedTabs section of dataB
library(ROCR)
p <- predict(model, newdata=subset(dataB, type="response"))
pr <- prediction(p, dataB$usedTabs)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
windows(title="ROC curve")
plot(prf, cex.lab=1.5)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc # result: 0.7083333
# Perform performance test on the usedTabs section of dataB
library(ROCR)
p <- predict(model, newdata=subset(dataB, type="response"))
pr <- prediction(p, data$usedTabs)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
windows(title="ROC curve")
plot(prf, cex.lab=1.5)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc # result: 0.7083333
# Perform performance test on the usedTabs section of dataB
library(ROCR)
p <- predict(model, newdata=subset(data, type="response"))
pr <- prediction(p, data$usedTabs)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
windows(title="ROC curve")
plot(prf, cex.lab=1.5)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc # result: 0.7083333
ttest <- t.test(dataA$time, dataB$time, paired = "TRUE")
ttest <- t.test(dataA$time, dataB$time, paired = "TRUE")
ttest <- t.test(dataA$time, dataB$time, paired = TRUE)
summary(ttest)
ttest
ttest <- t.test(dataA$time, dataB$time)
ttest
library(readr)
dataA <- read_csv("D:/Dropbox/UEUXopdr3/dataA.csv")
dataB <- read_csv("D:/Dropbox/UEUXopdr3/dataB.csv")
ttest <- t.test(dataA$time, dataB$time)
ttest
ttest <- t.test(dataA$time, dataB$time, paired = TRUE)
# Read the unpruned datasets for eacht test
library(readr)
dataA <- read_csv("D:/Dropbox/UEUXopdr3/dataA.csv")
dataB <- read_csv("D:/Dropbox/UEUXopdr3/dataB.csv")
# Caluclate the total time taken for each test.
dataA$time <- dataA$endtime - dataA$starttime
dataB$time <- dataB$endtime - dataB$starttime
# Remove the extra columns after copying the original in order to combine the results to one data.frame
dataBnew <- dataB
dataBnew$time1 <- NULL
dataBnew$time2 <- NULL
data <- rbind(dataA, dataBnew)
ttest <- t.test(dataA$time, dataB$time)
ttest
ttest <- t.test(dataA$time, dataB$time, paired = TRUE)
ttest
View(dataB)
View(dataA)
View(dataB)
library(readr)
dataA <- read_csv("D:/Dropbox/UEUXopdr3/dataApruned.csv")
dataB <- read_csv("D:/Dropbox/UEUXopdr3/dataBpruned.csv")
# Caluclate the total time taken for each test.
dataA$time <- dataA$endtime - dataA$starttime
dataB$time <- dataB$endtime - dataB$starttime
# Remove the extra columns after copying the original in order to combine the results to one data.frame
dataBnew <- dataB
dataBnew$time1 <- NULL
dataBnew$time2 <- NULL
data <- rbind(dataA, dataBnew)
rm(dataBnew)
# Execute a t-test and show the results
ttest <- t.test(dataA$time, dataB$time)
ttest
# Execute a paired t-test and show the results
ttest <- t.test(dataA$time, dataB$time, paired = TRUE)
ttest
# Version B
plot(dataB$time, dataB$usedTabs, xlab="Time (in seconds)", ylab="Probability of using Tabs", xlim=c(0,250))
model = glm(usedTabs ~ time, data = dataB, family = binomial, na.action = na.omit)
summary(model)
# Pseudo R-squared
library(rcompanion)
nagelkerke(model)
# Draw the curve and points on the plot
curve(predict(model,data.frame(time=x),type="resp"),add=TRUE, col="red")
points(dataB$time,fitted(model),pch=20, col='black')
# Perform performance test on the usedTabs section of dataA
library(ROCR)
p <- predict(model, newdata=subset(dataA, type="response"))
pr <- prediction(p, dataA$usedTabs)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
windows(title="ROC curve")
plot(prf, cex.lab=1.5)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc # result: 0.7083333
# Version B
plot(dataB$time, dataB$usedTabs, xlab="Time (in seconds)", ylab="Probability of using Tabs", xlim=c(0,250))
model = glm(usedTabs ~ time, data = dataB, family = binomial, na.action = na.omit)
summary(model)
# Pseudo R-squared
library(rcompanion)
nagelkerke(model)
# Draw the curve and points on the plot
curve(predict(model,data.frame(time=x),type="resp"),add=TRUE, col="red")
points(dataB$time,fitted(model),pch=20, col='black')
# Perform performance test on the usedTabs section of dataA
library(ROCR)
p <- predict(model, newdata=subset(dataA, type="response"))
pr <- prediction(p, dataA$usedTabs)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
windows(title="ROC curve")
plot(prf, cex.lab=1.5)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc # 0.8666667
# Version A
plot(dataA$time, dataA$usedTabs, xlab="Time (in seconds)", ylab="Probability of using Tabs", xlim=c(0,250))
model = glm(usedTabs ~ time, data = dataA, family = binomial, na.action = na.omit)
summary(model)
# Pseudo R-squared
library(rcompanion)
nagelkerke(model)
# Draw the curve and points on the plot
curve(predict(model,data.frame(time=x),type="resp"),add=TRUE, col="red")
points(dataA$time,fitted(model),pch=20, col='black')
# Perform performance test on the usedTabs section of dataB
library(ROCR)
p <- predict(model, newdata=subset(data, type="response"))
pr <- prediction(p, data$usedTabs)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
windows(title="ROC curve")
plot(prf, cex.lab=1.5)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc # result: 0.7083333
var(dataA$time)
var(dataB$time)
library(dplyr)
md <- data %>%
group_by(version) %>%
summarize(N = length(time),
Mean = mean(time),
SD = sd(time),
SE = SD/sqrt(N)),
Variance = var(time)
md
library(dplyr)
md <- data %>%
group_by(version) %>%
summarize(N = length(time),
Mean = mean(time),
SD = sd(time),
SE = SD/sqrt(N),
Variance = var(time))
md
library(dplyr)
md <- data %>%
group_by(version) %>%
summarize(N = length(time),
Mean = mean(time),
SD = sd(time),
SE = SD/sqrt(N),
Var = var(time))
md
library(dplyr)
md <- data %>%
group_by(version) %>%
summarize(N = length(time),
Mean = mean(time),
SD = sd(time),
SE = SD/sqrt(N))
md
install.packages("dplyr")
library(dplyr)
md <- data %>%
group_by(version) %>%
summarize(N = length(time),
Mean = mean(time),
SD = sd(time),
SE = SD/sqrt(N))
md
library(dplyr)
md <- data %>%
group_by(version) %>%
summarize(N = length(time),
Mean = mean(time),
SD = sd(time),
SE = SD/sqrt(N),
Variance = var(time))
md
